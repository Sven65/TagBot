{
	"RLua Serenity Wrapper": {
		"prefix": "wrap",
		"body": [
		"use rlua::{UserData, MetaMethod, Value, ToLua};",
		"use serenity::${1:model::id::MessageId};",
		"",
		"use crate::tags::lua::lua_modules::rs_lua::types::utils::types::ConstructableFrom;",
		"",
		"",
		"/// Wrapper for [`serenity::${1:model::id::MessageId}`]",
		"#[derive(Clone)]",
		"pub struct ${2:TBVideoQualityMode}(pub ${3:VideoQualityMode});",
		"",
		"impl ConstructableFrom<${3:VideoQualityMode}> for ${2:TBVideoQualityMode} {",
		"\t/// Creates a new wrapper",
		"\t/// ",
		"\t/// # Arguments",
		"\t/// * `${4:video_quality_mode}` - The serenity ${3:VideoQualityMode} to wrap",
		"\tfn new(${4:video_quality_mode}: ${3:VideoQualityMode}) -> ${2:TBVideoQualityMode} {",
		"\t\t${2:TBVideoQualityMode}(${4:video_quality_mode})",
		"\t}",
		"}",
		"",
		"impl UserData for ${2:TBVideoQualityMode} {",
		"\tfn add_methods<'lua, T: rlua::UserDataMethods<'lua, Self>>(methods: &mut T) {",
		"\t\tmethods.add_meta_method(MetaMethod::ToString, |ctx, this, _: Value| {",
		"\t\t\tthis.0.to_string().into_lua(ctx)",
		"\t\t});",
		"",
		"\t\t// methods.add_meta_method(MetaMethod::Index, |ctx, this, value: String| {",
		"\t\t// Ok(match value.as_str() {",
		"",
		"\t\t// })",
		"\t\t//})",
		"",
		"\t}",
		"}"
		],
		"description": "RLua Serenity Wrapper"
	},
	"RLua Serenity Wrapper 2 construct": {
		"prefix": "wrap2",
		"body": [
		"use rlua::{UserData, MetaMethod, Value, ToLua};",
		"use serenity::{${1:model::id::MessageId}, prelude::{Context as SerenityContext}};",
		"",
		"use crate::tags::lua::lua_modules::rs_lua::types::utils::types::ConstructableFrom2;",
		"",
		"",
		"/// Wrapper for [`serenity::${1:model::id::MessageId}`]",
		"#[derive(Clone)]",
		"pub struct ${2:TBVideoQualityMode}(pub ${3:VideoQualityMode}, pub SerenityContext);",
		"",
		"impl ConstructableFrom2<${3:VideoQualityMode}, SerenityContext> for ${2:TBVideoQualityMode} {",
		"\t/// Creates a new wrapper",
		"\t/// ",
		"\t/// # Arguments",
		"\t/// * `${4:video_quality_mode}` - The serenity ${3:VideoQualityMode} to wrap",
		"\t/// * `context` - The serenity context to wrap",
		"\tfn new(${4:video_quality_mode}: ${3:VideoQualityMode}, context: SerenityContext) -> ${2:TBVideoQualityMode} {",
		"\t\t${2:TBVideoQualityMode}(${4:video_quality_mode}, context)",
		"\t}",
		"}",
		"",
		"impl UserData for ${2:TBVideoQualityMode} {",
		"\tfn add_methods<'lua, T: rlua::UserDataMethods<'lua, Self>>(methods: &mut T) {",
		"\t\tmethods.add_meta_method(MetaMethod::ToString, |ctx, this, _: Value| {",
		"\t\t\tthis.0.to_string().into_lua(ctx)",
		"\t\t});",
		"",
		"\t\t// methods.add_meta_method(MetaMethod::Index, |ctx, this, value: String| {",
		"\t\t// Ok(match value.as_str() {",
		"",
		"\t\t// })",
		"\t\t//})",
		"",
		"\t}",
		"}"
		],
		"description": "RLua Serenity Wrapper"
	},
	"TB Wrapper tester": {
		"prefix": "test",
		"body": [
			"#[rustfmt::skip]",
			"fn get_${1:str}(param: &str, expected: &${2:str}) {",
			"\tLua::new().context(|lua| {",
			"\t\tlet userdata = lua.create_userdata(${3:my_userdata}).unwrap();",
			"\t\tlet globals = lua.globals();",
			"\t\tglobals.set(\"userdata\", userdata).unwrap();",
			"",
			"\t\tlet data = lua.load(",
			"\t\t\tformat!(r#\"",
			"\t\t\t\treturn userdata.{}",
			"\t\t\t\"#, param).as_str(),",
			"\t\t).eval::<${4:str}>().unwrap();",
			"",
			"\t\tassert_eq!(data, expected)",
			"\t})",
			"}"
		],
		"description": "TB Wrapper tester"
	}
}